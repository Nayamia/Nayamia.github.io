<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nayamia.github.io/</id>
    <title>Gridea</title>
    <updated>2021-04-27T06:08:23.361Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nayamia.github.io/"/>
    <link rel="self" href="https://nayamia.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://nayamia.github.io/images/avatar.png</logo>
    <icon>https://nayamia.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[《机器学习-Python实践》读书笔记 - 1-1]]></title>
        <id>https://nayamia.github.io/post/lesslessji-qi-xue-xi-python-shi-jian-greatergreater-du-shu-bi-ji-1-1/</id>
        <link href="https://nayamia.github.io/post/lesslessji-qi-xue-xi-python-shi-jian-greatergreater-du-shu-bi-ji-1-1/">
        </link>
        <updated>2021-04-26T12:45:26.000Z</updated>
        <content type="html"><![CDATA[<h2 id="12-什么是机器学习">1.2 什么是机器学习</h2>
<p>机器学习是多领域的交叉学科，研究计算机如何模拟、学习人的行为获取新知识、技能，重新组织已有知识使之不断完善自己的性能，已有广泛应用。</p>
<p>算法分为两大类：</p>
<ol>
<li>监督学习：在学习过程中提供对错指示，让机器自己减少误差。用于分类喝预测，训练集要求包括输入输出</li>
<li>无监督学习：又称归纳性学习，用K方式建立中心，通过循环和递减运算减少误差达到分类目的</li>
</ol>
<h2 id="13">1.3</h2>
<p>利用机器学习的预测模型来解决问题有六个基本步骤</p>
<figure data-type="image" tabindex="1"><img src="C:%5CUsers%5CNayami%5CDocuments%5CGitHub%5CNayamia.github.io%5Cimg%5CMD%E6%8F%92%E5%9B%BE%5C%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%AD%E5%A4%A7%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4.jpg" alt="" loading="lazy"></figure>
<p><strong>定义问题</strong>：研究和提炼问题的特征，以帮助我们更好地理解项目的目标。</p>
<p>· <strong>数据理解</strong>：通过描述性统计和可视化来分析现有的数据。</p>
<p>· <strong>数据准备</strong>：对数据进行格式化，以便于构建一个预测模型。</p>
<p>· <strong>评估算法</strong>：通过一定的方法分离一部分数据，用来评估算法模型，并选取一部分代表数据进行分析，以改善模型。</p>
<p>· <strong>优化模型</strong>：通过调参和集成算法提升预测结果的准确度。</p>
<p>· <strong>结果部署</strong>：完成模型，并执行模型来预测结果和展示。</p>
<h2 id="14-学习原则">1.4 学习原则</h2>
<ol>
<li>创建半正式的工作产品：以文章、技术报告、代码存储形式几下学习内容快速为他人提供可展示的内容</li>
<li>实时学习：在平时积累知识</li>
<li>利用现有Skills</li>
<li>持续不断学习改进</li>
</ol>
<h2 id="15-技巧">1.5 技巧</h2>
<ol>
<li>启动小项目</li>
<li>每周完成一个项目保持学习势头、建立积累项目工作区</li>
<li>分享自己的成果</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【转】python爬虫（requests+bs4的基本使用）]]></title>
        <id>https://nayamia.github.io/post/zhuan-python-pa-chong-requestsbs4-de-ji-ben-shi-yong/</id>
        <link href="https://nayamia.github.io/post/zhuan-python-pa-chong-requestsbs4-de-ji-ben-shi-yong/">
        </link>
        <updated>2021-04-26T12:44:54.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>原帖链接：<a href="https://blog.csdn.net/weixin_44388092/article/details/107297083#comments_15522629">python爬虫（requests+bs4的基本使用）</a></p>
<p>原作者：<a href="https://blog.csdn.net/weixin_44388092">小熊&amp;Gary</a></p>
<p>转载已征得同意</p>
</blockquote>
<pre><code class="language-python"># -*- coding: utf-8 -*-
# author:Gary
# 第一步，导入需要用到的库
import requests
from bs4 import BeautifulSoup

# 第二步，请求网页内容
url = 'https://gary666.com/'  # 需要请求的网页的链接
html = requests.get(url)  # get方式请求数据
# print(html.status_code)  # 查看请求的状态码（200表示请求正常）
html.encoding = html.apparent_encoding  # 设置编码，防止由于编码问题导致文字错乱
# print(html.text)  # 查看请求到的内容
content = html.text

# 第三步，解析你需要的内容
# 解析器自带的是html.parser，也可以用lxml，兼容性更好，不过要单独安装第三方库
soup = BeautifulSoup(content, &quot;html.parser&quot;)
# 1 按标签名查找标签
# soup.标签名 # 获取第一个匹配到的标签
print('获取第一个匹配到的超链接', soup.a)  # 获取第一个匹配到的超链接

# 2 属性
# soup.标签名.attrs # 获取标签中所有属性名与对应属性值的字典
print('获取超链接中所有属性名与对应属性值的字典', soup.a.attrs)  # 获取超链接中所有属性名与对应属性值的字典
# soup.标签名.attrs[&quot;属性名&quot;]获取属性名对应的属性值
print('获取超链接href属性对应的属性值', soup.a.attrs[&quot;href&quot;])  # 获取超链接href属性对应的属性值
# soup.标签名[&quot;属性名&quot;]获取属性名对应的属性值的简写
print('获取超链接href属性对应的属性值的简写', soup.a[&quot;href&quot;])  # 获取超链接href属性对应的属性值的简写
# soup.标签名.string  # 获取第一个匹配到的标签的内容
print('获取第一个匹配到的超链接的内容', soup.a.string)  # 获取第一个匹配到的超链接的内容
# soup.标签名.text  # 获取第一个匹配到的标签以及其所包含的子标签的所有内容
print('获取第一个匹配到的超链接以及其所包含的子标签的所有内容', soup.a.text)  # 获取第一个匹配到的超链接以及其所包含的子标签的所有内容

# 3 函数
# soup.标签名.get_text()  # 同soup.标签名.text
print(soup.a.get_text())  # 同soup.a.text
# soup.find(&quot;标签名&quot;) # 同soup.标签名
print(soup.find(&quot;a&quot;))  # 同soup.a
print(soup.find(&quot;a&quot;, href=&quot;/detail?dbname=life&amp;num=35&quot;))  # 根据属性值定位到第一个匹配到的标签
# 注意： 若属性名是 class 则需要在后面加个下划线,写成 class_
# soup.find_all(&quot;标签名&quot;) # 获取匹配到的所有标签, 返回一个列表
a_list = soup.find_all(&quot;a&quot;)  # 获取所有的超链接
for a in a_list:  # 循环查看每个超链接的文字和url
    if a.string is None:  # 如果超链接的内容为空
        continue
    else:
        print(a.string + &quot;:&quot; + a.get(&quot;href&quot;))
# soup.find_all([&quot;标签1&quot;, &quot;标签2&quot;])   可以获取多种类的标签，通过列表指定获取的多个标签
soup.find_all([&quot;a&quot;, &quot;div&quot;])  # 可以获取多种类的标签，通过列表指定获取的多个标签
# soup.find_all(&quot;标签名&quot;, limit=int(n))  # limit参数指定获取个数，为整数
print(soup.find_all(&quot;a&quot;, limit=2))  # 获取前2个匹配到的超链接

# 第四步，存储数据


</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java抽象类与接口]]></title>
        <id>https://nayamia.github.io/post/java-chou-xiang-lei-yu-jie-kou/</id>
        <link href="https://nayamia.github.io/post/java-chou-xiang-lei-yu-jie-kou/">
        </link>
        <updated>2021-04-26T12:43:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="抽象类">抽象类</h1>
<p><strong>不能实例化对象</strong></p>
<p>必须被继承才能使用</p>
<p>用abstract class来定义</p>
<h2 id="抽象方法">抽象方法</h2>
<p>方法的具体实现由子类确定</p>
<p>用abstract关键字声明</p>
<p>包含抽象方法的类必须是抽象类</p>
<p>子类必须重写父类的抽象方法</p>
<h1 id="接口">接口</h1>
<p>抽象类型，是抽象方法的集合</p>
<p>通常以interface声明</p>
<p>类通过继承接口的方式来继承接口的抽象方法</p>
<p><strong>与类的区别：</strong></p>
<ul>
<li>支持多继承</li>
<li>不是被类继承而是被类实现</li>
<li>不能包含成员变量（除了statich和final）</li>
<li>没有构造方法</li>
<li>不能用于实例化</li>
<li>所有方法必须是抽象方法</li>
</ul>
<p><strong>抽象类和接口的区别：</strong></p>
<ul>
<li>抽象类的方法可以有方法体实现具体功能但是接口中的方法不行</li>
<li>接口的成员变量只能是public static final类型</li>
<li>接口不能含有静态代码块</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java封装：类的正确打开方式]]></title>
        <id>https://nayamia.github.io/post/java-feng-zhuang-lei-de-zheng-que-da-kai-fang-shi/</id>
        <link href="https://nayamia.github.io/post/java-feng-zhuang-lei-de-zheng-que-da-kai-fang-shi/">
        </link>
        <updated>2021-04-26T12:42:47.000Z</updated>
        <content type="html"><![CDATA[<p>作用</p>
<pre><code>* 减少耦合
* 内部结构可修改
* 可对成员变量精确控制
* 隐藏信息，实现细节
</code></pre>
<h1 id="步骤">步骤</h1>
<p>修改属性的可见性来限制对属性的访问（一般限制为private）</p>
<p>对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问</p>
<pre><code>public class Person{
    private String name;
    private int age;
​
    public int getAge(){
      return age;
    }
​
    public String getName(){
      return name;
    }
​
    public void setAge(int age){
      this.age = age;
    }
​
    public void setName(String name){
      this.name = name;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Markdown的一点感想]]></title>
        <id>https://nayamia.github.io/post/shi-yong-markdown-de-yi-dian-gan-xiang/</id>
        <link href="https://nayamia.github.io/post/shi-yong-markdown-de-yi-dian-gan-xiang/">
        </link>
        <updated>2021-04-26T12:42:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="目录">目录</h2>
<ol>
<li>前言</li>
<li>工具</li>
<li>语法之分层技巧心得</li>
</ol>
<h2 id="前言">前言</h2>
<p>目前到现在使用Markdown大概两三年了，平时能用MD的地方都会用MD解决，用MD的习惯已经强到电脑根本没有装office和金山都没发现（虽然到现在为止写过的MD文档也没有很多）。</p>
<p>平时我的文档量本来就蛮少的，一个星期写不了多少东西，但是如果要写那肯定是MD，绝大多数时候都是拿来做笔记，说实话markdown做笔记的体验简直不要太好，读写都远比docx来的方便，文件也小，可以专注在内容上，写作也舒服点。特别是分层的文档，如知识点整理。</p>
<h3 id="对于所有人markdown都能有一个适合你的使用理由">对于所有人，Markdown都能有一个适合你的使用理由</h3>
<p>——如果你是学生，你不妨尝试用Markdown来做平时的笔记整理，丰富的格式可以满足绝大多数的笔记内容，比如公式</p>
<p>——如果你是程序员，你总得学一下Markdown，写文档时你总是会需要用到它，让你的文档变得更清晰</p>
<p>——如果你是普通上班族（要素察觉），你可以逐渐尝试用Markdown来写文档，写报告，可以让内容显得更加简练整洁</p>
<p>——如果你正在求助，你也可以用Markdown来写简历，它免费，快速，整齐，同时可以满足跨平台的需求，也可以转成PDF或者HTML</p>
<h2 id="工具">工具</h2>
<p>首先是工具问题，个人首推<a href="www.typora.io"><strong>Typora</strong></a>，人气这么高真的不是吹的，基本语法齐全，有部分扩充语法，插入公式、表格、代码块极其方便，符号相当齐全。最主要的是，它真的好看啊！</p>
<p>个人感觉Typora对于各个方面的Markdown用户都可以满足，学生党可以非常方便的记笔记，博客党可以用Newsprint等主题，专注模式和打字机模式获得优质的写作体验。</p>
<p>不过新手入坑Typora还是需要注意一点比较重要的设置，Typora默认<strong>没有自动保存</strong>需要设置一下，虽然能够很方便的找回但还是很坏心情。</p>
<p>其次推荐的是印象笔记和<strong>石墨文档</strong>（石墨文档优先推荐，印象笔记吃硬盘），日常用的最多的其实还是石墨文档，只是最近解锁了Typora+OneNote的搭配所以在逐渐抛弃石墨。石墨仅有的缺点就是：</p>
<ol>
<li>它对Markdown的语法有点缺漏，比如Markdown最多支持六级标题但石墨只有三级</li>
<li>对公式的插入简直束手无策</li>
<li>还有一些操作上的小不顺心，但我觉得问题不大</li>
<li>另外绘制图表功能虽然有但是显得很鸡肋，使用中略繁琐</li>
</ol>
<h2 id="关于语法">关于语法</h2>
<p>Markdown有六级标题，用一至六个&quot;#&quot;表示，但是这个特性在提供了强大的内容分层能力的同时也带来了一些困扰，比如：<strong>什么时候该用什么标题格式</strong>。这个问题甚至持续到了现在。</p>
<p>首先我认为你文档的名称应该是你的文件的唯一一级标题。用最朴实的方式：剩下的内容根据层级顺序依次递进，不要去关注内容的重要性和小主题的丰富性，这样只能让你花几十分钟纠结标题格式。Markdown的初衷就是让你专注于内容，千万不要本末倒置，排版上能看得懂就行了不要过分纠结美观。</p>
<p>另外我推荐的解决方案是，较细节的知识点标题，如Android的四大组件，可以利用好TAB缩进和<strong>加粗</strong>来代替小标题，如下图：<br>
<img src="https://github.com/Nayamia/nayamia.github.io/blob/master/img/MD%E6%8F%92%E5%9B%BE/%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6.png" alt="四大组件" loading="lazy"></p>
<p>图中先是写了组件的小目录，然后用缩进插入解释具体用途，这种方法适用于信息不太大同时内容并非特别重要且需要分层的内容结构。</p>
<p>以上</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《机器学习-Python实践》读书笔记 - 1-2]]></title>
        <id>https://nayamia.github.io/post/lesslessji-qi-xue-xi-python-shi-jian-greatergreater-du-shu-bi-ji-1-2/</id>
        <link href="https://nayamia.github.io/post/lesslessji-qi-xue-xi-python-shi-jian-greatergreater-du-shu-bi-ji-1-2/">
        </link>
        <updated>2021-04-26T12:41:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="22-scipy">2.2 SciPy</h2>
<p>SciPy是在数学科学工程学方面被广泛使用的库，包括统计、优化、整合、线性代数模块······</p>
<p>依赖一下几个类库：</p>
<ol>
<li>NumPy：用来存储处理大型矩阵，提供高级数值编程工具</li>
<li>Matplotlib：Python著名2D绘图库，适合交互性制图</li>
<li>Pandas：基于NumPy的工具用于解决数据分析任务，快速便捷的处理数据，可操作大型数据集</li>
</ol>
<h2 id="23-scikit-learn">2.3 scikit-learn</h2>
<p>Python中开发和实践机器学习的著名库之一，以来SciPy</p>
<p>分为六大部分：</p>
<ul>
<li>分类</li>
<li>回归</li>
<li>聚类</li>
<li>数据降维</li>
<li>模型选择</li>
<li>数据预处理</li>
</ul>
<p>scikit-learn对多层感知器神经网络的实现不适合处理大规模问题</p>
<h2 id="24-环境安装">2.4 环境安装</h2>
<h3 id="scipy">SciPy</h3>
<p><a href="https%EF%BC%9A//www.scipy.org/install.html">SciPy安装指南</a></p>
]]></content>
    </entry>
</feed>